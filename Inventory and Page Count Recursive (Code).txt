;;;===,,,@echo off
;;;===,,,echo Inventory and Page Count V6 (RECURSIVE MODE) - By Cpl Nicholas COTTON. nicholas.cotton@rcmp-grc.gc.ca
;;;===,,,echo This app will print a list of PDFs and their page count to "00-Inventory-and-Page-Count-Recursive.csv"
;;;===,,,echo Warning! This will not work for password encrypted PDFs. An error will be displayed.
;;;===,,,echo Warning! This app will only print the page count for the first document in a portfolio.
;;;===,,,echo Uses embedded PDFInfo v 4.3 from https://www.xpdfreader.com/
;;;===,,,C:\Windows\System32\findstr.exe /v "^;;;===,,," "%~f0" > 00pdfinfo-extracted.exe
;;;===,,,powershell -Command "$Root = $pwd.path; $INVOBJ = foreach($File in (Get-ChildItem -Path $Folder -Recurse -Filter *.pdf )){$Pages = (.\00pdfinfo-extracted $File.FullName | Select-String -Pattern '(?<=Pages:\s*)\d+').Matches.Value; [PSCustomObject]@{FileName = $File.Name; Pages = $Pages; Combined = '=CONCATENATE(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-2),\" (\",OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1),IF(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1)=0,\"Error getting \",\"\"),(IF(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1)=1,\" page\",\" pages\")),\")\")'; RelativePath = $File.FullName.Substring($Root.Length+1);}}; $INVOBJ += foreach($File in (Get-ChildItem -Path $Folder -Recurse -Exclude 00-Inventory-and-Page-Count-Recursive.bat,00pdfinfo-extracted.exe,00-Inventory-and-Page-Count-Recursive.csv,*.pdf -Attributes !Directory )){[PSCustomObject]@{FileName = $File.Name; Pages = \"\"; Combined = '=CONCATENATE(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-2),\" (\",OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1),IF(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1)=0,\"Error getting \",\"\"),(IF(OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1)=1,\" page\",\" pages\")),\")\")'; RelativePath = $File.FullName.Substring($Root.Length+1);}};$INVOBJ | Sort-Object "RelativePath" | Export-Csv -NoTypeInformation -Path 00-Inventory-and-Page-Count-Recursive.csv"
;;;===,,,del 00pdfinfo-extracted.exe
;;;===,,,echo Review errors for non-PDF items or encrypted PDFs.
;;;===,,,echo Otherwise the program has completed successfully.
;;;===,,,pause
;;;===,,,exit /b
